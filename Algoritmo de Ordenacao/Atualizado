
#include <iostream>
#include <time.h>
#include <math.h>
#include <ctime>
#include <chrono>

using namespace std;

void preencherVetor(int v[], int tam) {
    for (int i = 0; i < tam; i++) {
        v[i] = rand() % tam;
    }
}

void mostrarVetor(int v[], int tam) {
    for (int i = 0; i < tam; i++) {
        cout << v[i] << " ";
    }
    cout << endl;
}

int escolherPrimeiroPivo(int v[], int esq, int dir) {
    return v[esq];
}

int escolherPivoMeio(int v[], int esq, int dir) {
    int meio = (esq + dir) / 2;
    return v[meio];
}

int escolherUltimoPivo(int v[], int esq, int dir) {
    return v[dir];
}

void quicksort(int v[], int esq, int dir, int (*escolherPivo)(int[], int, int)) {
    int aux, i = esq, j = dir;
    int x = escolherPivo(v, esq, dir);

    do {
        while (x > v[i]) i++;
        while (x < v[j]) j--;
        if (i <= j) {
            aux = v[i];
            v[i] = v[j];
            v[j] = aux;
            i++;
            j--;
        }
    } while (i <= j);
    if (esq < j) quicksort(v, esq, j, escolherPivo);
    if (dir > i) quicksort(v, i, dir, escolherPivo);
}

void shell(int v[], int r, int s, int n) {
    int i, j, k, temp;
    bool achei;

    for (i = s + r; i < n; i += r) {
        j = s;
        achei = false;
        while (j < i && !achei) {
            if (v[i] < v[j]) achei = true;
            else j = j + r;
        }
        if (achei) {
            temp = v[i];
            k = i - r;
            while (k > j - r) {
                v[k + r] = v[k];
                k = k - r;
            }
            v[j] = temp;
        }
    }
}

void shellsort(int v[], int tam) {
    for (int i = 2; i >= 0; i--) {
        int inc = pow(2, i);
        for (int j = 0; j <= inc; j++) {
            shell(v, inc, j, tam);
        }
    }
}

void gerarMelhorCaso(int v[], int tam) { // vetor já ordenado
    for (int i = 0; i < tam; ++i) {
        v[i] = i;
    }
}

void gerarPiorCaso(int v[], int tam) { // vetor ordenado ao contrário
    for (int i = 0; i < tam; ++i) {
        v[i] = tam - i - 1;
    }
}

void gerarCasoMediano(int v[], int tam) { // preenche o vetor com valores aleatórios
    preencherVetor(v, tam);
}

int main()
{
    srand(time(NULL));
    int tam, numCasos = 0, numExecucoes = 0;

    cout << "Digite o tamanho do vetor: ";
    cin >> tam;

    while (true) {
        int* original = new int[tam];
        int* copia = new int[tam];
        int* vetorPrimeiroPivo = new int[tam];
        int* vetorMeioPivo = new int[tam];
        int* vetorUltimoPivo = new int[tam];

        cout << "Digite a quantidade de casos desejados: ";
        cin >> numCasos;

        cout << "Digite a quantidade de execucoes para cada caso: ";
        cin >> numExecucoes;

        cout << "\nVetor original: ";
        preencherVetor(original, tam);
        mostrarVetor(original, tam);

        for (int i = 0; i < tam; i++) {
            vetorPrimeiroPivo[i] = original[i];
            vetorMeioPivo[i] = original[i];
            vetorUltimoPivo[i] = original[i];
        }

        quicksort(vetorPrimeiroPivo, 0, tam - 1, escolherPrimeiroPivo);
        quicksort(vetorMeioPivo, 0, tam - 1, escolherPivoMeio);
        quicksort(vetorUltimoPivo, 0, tam - 1, escolherUltimoPivo);

        cout << "\nVetor Quicksort (Primeiro pivo): ";
        mostrarVetor(vetorPrimeiroPivo, tam);
        cout << endl;

        cout << "Vetor Quicksort (Pivo do meio): ";
        mostrarVetor(vetorMeioPivo, tam);
        cout << endl;

        cout << "Vetor Quicksort (Ultimo pivo): ";
        mostrarVetor(vetorUltimoPivo, tam);
        cout << endl;

        for (int caso = 0; caso < numCasos; ++caso) {
            if (caso == 0) {
                gerarMelhorCaso(copia, tam);
                cout << "\nMelhor caso: ";
            }
            else if (caso == 1) {
                gerarPiorCaso(copia, tam);
                cout << "\nPior Caso: ";
            }
            else {
                gerarCasoMediano(copia, tam);
                cout << "\nCaso Medio " << caso - 1 << ": ";
            }

            mostrarVetor(copia, tam);

            if (caso == 0 || caso == 1) {
                quicksort(copia, 0, tam - 1, escolherPrimeiroPivo);
            }
            else {
                auto start = chrono::high_resolution_clock::now();
                shellsort(copia, tam);
                auto end = chrono::high_resolution_clock::now();
                auto duration = chrono::duration_cast<chrono::microseconds>(end - start);
                cout << "\nMedia de tempo de execucao para o caso " << caso - 1 << ": " << duration.count() << " microssegundos\n";
            }
        }

        delete[] original;
        delete[] copia;
        delete[] vetorPrimeiroPivo;
        delete[] vetorMeioPivo;
        delete[] vetorUltimoPivo;

        cout << endl;
    }

    return 0;
}
