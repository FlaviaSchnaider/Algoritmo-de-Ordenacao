#include <iostream>
#include <stdlib.h>
#include <time.h>
#include <chrono>

#define limite 10000
using namespace std;

struct vetorcasos {
	double vetG4[limite];
	double vetG6[limite];
	double vetG8[limite];
};

void perguntarVezes(int& vetorTam, int& qtdCasos, int& qtdExecucoes) {
	cout << "Digite o tamanho do vetor: ";
	cin >> vetorTam;
	cout << "Digite a quantidade de casos desejados: ";
	cin >> qtdCasos;
	cout << "Digite a quantidade de execucoes por caso: ";
	cin >> qtdExecucoes;
}

void preencher_vetor(int v[], int tam) {
	for (int i = 0; i < tam; i++) {
		v[i] = rand() % limite;
	}
}

void preencherVetorMelhorCaso(int v[], int tam) {
	for (int i = 0; i < tam; i++) {
		v[i] = i;
	}
}

void preencherVetorPiorCaso(int v[], int tam) {
	for (int i = 0; i < tam; i++) {
		v[i] = tam - i - 1;
	}
}

void mostrar_vetor(int v[], int tam) {
	for (int i = 0; i < tam; i++) {
		cout << v[i] << "  ";
	}
}

void Shell(int v[], int r, int s, int n) {
	int i, j, k, temp;
	bool achei;

	for (i = s + r; i < n; i += r) {
		j = s;
		achei = false;
		while (j < i && !achei) {
			if (v[i] < v[j]) achei = true;
			else j = j + r;
		}
		if (achei) {
			temp = v[i];
			k = i - r;
			while (k > j - r) {
				v[k + r] = v[k];
				k = k - r;
			}
			v[j] = temp;
		}
	}
}

void shellsort(int v[], int tam) {
	for (int i = 2; i >= 0; i--) {
		int inc = pow(2, i);
		for (int j = 0; j <= inc; j++) {
			Shell(v, inc, j, tam);
		}
	}
}

void mostrarMedias(int vezesRodadas, int qntCasos, vetorcasos casosTempo[]) {
	for (int i = 0; i < qntCasos; i++) {
		cout << "\nCaso " << i + 1 << " \n";

		for (int j = 0; j < vezesRodadas; j++) {
			cout << "Execucao " << j + 1 << ": " << endl;
			cout << "Tempo de execucao do Grupo 4: " << casosTempo[i].vetG4[j] << " microssegundos" << endl;
			cout << "Tempo de execucao do Grupo 6: " << casosTempo[i].vetG6[j] << " microssegundos" << endl;
			cout << "Tempo de execucao do Grupo 8: " << casosTempo[i].vetG8[j] << " microssegundos" << endl << endl;
		}
	}
}

void mostrarMediasMelhorCaso(int vezesRodadas, double melhorG4[], double melhorG6[], double melhorG8[]) {
	for (int i = 0; i < vezesRodadas; i++) {
		cout << endl << "Execucao " << i + 1 << " do Melhor Caso: " << endl;
		cout << "Tempo de execucao do Grupo 4: " << melhorG4[i] << " microssegundos" << endl;
		cout << "Tempo de execucao do Grupo 6: " << melhorG6[i] << " microssegundos" << endl;
		cout << "Tempo de execucao do Grupo 8: " << melhorG8[i] << " microssegundos" << endl << endl;
	}
}

void mostrarMediasPiorCaso(int vezesRodadas, double piorG4[], double piorG6[], double piorG8[]) {
	for (int i = 0; i < vezesRodadas; i++) {
		cout << "Execucao " << i + 1 << " do Pior Caso: " << endl;
		cout << "Tempo de execucao do Grupo 4: " << piorG4[i] << " microssegundos" << endl;
		cout << "Tempo de execucao do Grupo 6: " << piorG6[i] << " microssegundos" << endl;
		cout << "Tempo de execucao do Grupo 8: " << piorG8[i] << " microssegundos" << endl << endl;
	}
}


int main() {
	srand(time(NULL));
	int tamVetor = 0, qtdCasos = 0, qtdExecucoes = 0;

	perguntarVezes(tamVetor, qtdCasos, qtdExecucoes);

	//MELHOR CASO
	int vetormelhor[limite];
	double tempoMelhor4[limite], tempoMelhor6[limite], tempoMelhor8[limite];

	preencherVetorMelhorCaso(vetormelhor, tamVetor);
	cout << "\n\nVetor melhor caso: " << endl;
	mostrar_vetor(vetormelhor, tamVetor);
	cout << endl;

	for (int k = 0; k < qtdExecucoes; ++k) {
		// grupo 4
		auto startG4 = chrono::high_resolution_clock::now();
		shellsort(vetormelhor, tamVetor);
		auto endG4 = chrono::high_resolution_clock::now();
		chrono::duration<double> tempoExecucaoG4 = endG4 - startG4;
		tempoMelhor4[k] = tempoExecucaoG4.count();
		cout << "\nDividindo em 4 vezes - Execucao " << k + 1 << endl;
		mostrar_vetor(vetormelhor, tamVetor);
		cout << endl;

		// grupo 6
		auto startG6 = chrono::high_resolution_clock::now();
		shellsort(vetormelhor, tamVetor);
		auto endG6 = chrono::high_resolution_clock::now();
		chrono::duration<double> tempoExecucaoG6 = endG6 - startG6;
		tempoMelhor6[k] = tempoExecucaoG6.count();
		cout << "\nDividindo em 6 vezes - Execucao " << k + 1 << endl;
		mostrar_vetor(vetormelhor, tamVetor);
		cout << endl;

		// grupo 8
		auto startG8 = chrono::high_resolution_clock::now();
		shellsort(vetormelhor, tamVetor);
		auto endG8 = chrono::high_resolution_clock::now();
		chrono::duration<double> tempoExecucaoG8 = endG8 - startG8;
		tempoMelhor8[k] = tempoExecucaoG8.count();
		cout << "\nDividindo em 8 vezes - Execucao " << k + 1 << endl;
		mostrar_vetor(vetormelhor, tamVetor);
		cout << endl << endl << endl;
		
	}

	// PIOR CASO
	int vetorpior[limite];
	double tempoPior4[limite], tempoPior6[limite], tempoPior8[limite];

	preencherVetorPiorCaso(vetorpior, tamVetor);
	cout << "\n\nVetor pior caso: " << endl;
	mostrar_vetor(vetorpior, tamVetor);
	cout << endl;

	for (int k = 0; k < qtdExecucoes; ++k) {
		// grupo 4
		auto startG4 = chrono::high_resolution_clock::now();
		shellsort(vetorpior, tamVetor);
		auto endG4 = chrono::high_resolution_clock::now();
		chrono::duration<double> tempoExecucaoG4 = endG4 - startG4;
		tempoPior4[k] = tempoExecucaoG4.count();
		cout << "\nDividindo em 4 vezes - Execucao " << k + 1 << endl;
		mostrar_vetor(vetorpior, tamVetor);
		cout << endl;

		// grupo 6
		auto startG6 = chrono::high_resolution_clock::now();
		shellsort(vetorpior, tamVetor);
		auto endG6 = chrono::high_resolution_clock::now();
		chrono::duration<double> tempoExecucaoG6 = endG6 - startG6;
		tempoPior6[k] = tempoExecucaoG6.count();
		cout << "\nDividindo em 6 vezes - Execucao " << k + 1 << endl;
		mostrar_vetor(vetorpior, tamVetor);
		cout << endl;

		// grupo 8
		auto startG8 = chrono::high_resolution_clock::now();
		shellsort(vetorpior, tamVetor);
		auto endG8 = chrono::high_resolution_clock::now();
		chrono::duration<double> tempoExecucaoG8 = endG8 - startG8;
		tempoPior8[k] = tempoExecucaoG8.count();
		cout << "\nDividindo em 8 vezes - Execucao " << k + 1 << endl;
		mostrar_vetor(vetorpior, tamVetor);
		cout << endl << endl << endl;
	}

	// CASOS GERADOS ALEATORIOS
	vetorcasos* vetTempoCasos = new vetorcasos[limite];

	for (int y = 0; y < qtdCasos; ++y) {
		int vetorcaso[limite];

		preencher_vetor(vetorcaso, tamVetor);
		cout << "\n\nVetor caso " << y + 1 << ": " << endl;
		mostrar_vetor(vetorcaso, tamVetor);
		cout << endl;

		for (int k = 0; k < qtdExecucoes; ++k) {
			// grupo 4
			auto startG4 = chrono::high_resolution_clock::now();
			shellsort(vetorcaso, tamVetor);
			auto endG4 = chrono::high_resolution_clock::now();
			chrono::duration<double> tempoExecucaoG4 = endG4 - startG4;
			vetTempoCasos[y].vetG4[k] = tempoExecucaoG4.count();
			cout << "\nDividindo em 4 vezes - Execucao " << k + 1 << endl;
			mostrar_vetor(vetorcaso, tamVetor);
			cout << endl;

			// grupo 6
			auto startG6 = chrono::high_resolution_clock::now();
			shellsort(vetorcaso, tamVetor);
			auto endG6 = chrono::high_resolution_clock::now();
			chrono::duration<double> tempoExecucaoG6 = endG6 - startG6;
			vetTempoCasos[y].vetG6[k] = tempoExecucaoG6.count();
			cout << "\nDividindo em 6 vezes - Execucao " << k + 1 << endl;
			mostrar_vetor(vetorcaso, tamVetor);
			cout << endl;

			// grupo 8
			auto startG8 = chrono::high_resolution_clock::now();
			shellsort(vetorcaso, tamVetor);
			auto endG8 = chrono::high_resolution_clock::now();
			chrono::duration<double> tempoExecucaoG8 = endG8 - startG8;
			vetTempoCasos[y].vetG8[k] = tempoExecucaoG8.count();
			cout << "\nDividindo em 8 vezes - Execucao " << k + 1 << endl;
			mostrar_vetor(vetorcaso, tamVetor);
			cout << endl << endl << endl;
		}
	}
	double mediaMelhor4 = 0, mediaMelhor6 = 0, mediaMelhor8 = 0;
	double mediaPior4 = 0, mediaPior6 = 0, mediaPior8 = 0;

	mostrarMediasMelhorCaso(qtdExecucoes, tempoMelhor4, tempoMelhor6, tempoMelhor8);
	mostrarMediasPiorCaso (qtdExecucoes, tempoPior4, tempoPior6, tempoPior8);
	mostrarMedias(qtdExecucoes, qtdCasos, vetTempoCasos);

	cout << endl;
	delete[] vetTempoCasos;

	return 0;
}
